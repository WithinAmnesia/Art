shader_type spatial;
uniform bool billboard = true;
uniform bool y_billboard = false;
uniform vec2 xy_scale = vec2(1.0, 1.0);
uniform int rotations = 8;

uniform sampler2D sprite_texture : source_color, filter_nearest;

void vertex() {
    if (billboard) {
        mat4 billboard_matrix = VIEW_MATRIX * mat4(
                INV_VIEW_MATRIX[0] * xy_scale.x,
                y_billboard ? INV_VIEW_MATRIX[1] : MODEL_MATRIX[1] * xy_scale.y,
                INV_VIEW_MATRIX[2],
                MODEL_MATRIX[3]
            );
            MODELVIEW_MATRIX = billboard_matrix;
    }
}

void fragment() {
    vec2 uv = UV / vec2(float(rotations), 1.0);
    
    float rotation_angle_normalized = 0.0;
    
    if (NORMAL.r < 0.0) {
        rotation_angle_normalized = (atan(NORMAL.b/NORMAL.r) / PI + 0.5) / 2.0;
    } else {
        rotation_angle_normalized = (atan(NORMAL.b/NORMAL.r) / PI + 1.5) / 2.0;
    }
    
    vec2 uv_offset = vec2(round(rotation_angle_normalized * float(rotations)) / float(rotations), 0.0);
    
    vec4 sprite_color = texture(sprite_texture, uv + uv_offset);
    ALBEDO = sprite_color.rgb;
    ALPHA = sprite_color.a;
}

//notarget137 "Here you go. Feed it 8 rotations in one sprite in a row and it's done."
//MIT License
